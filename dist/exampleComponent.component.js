let getComponent;(()=>{"use strict";getComponent=()=>{var e,t,i,o,n,r;if(!reportGroup.fights.every((e=>2677===e.encounterId)))return{component:"EnhancedMarkdown",props:{content:'This component only works for <EncounterIcon id="2677">Fyrakk</EncounterIcon>.'}};const s=new Set(["Ridud","Olgey","Malkrok","Dolanpepe","Sarw","Glyco","Susjo","Skarwi"]);let a=1;const l=reportGroup.reports[0].fights.reduce(((e,t)=>(t.difficulty&&t.endTime-t.startTime>8e3&&(e[t.id]=a,a++),e)),{}),p=417807,d=reportGroup.abilities.find((e=>e.id===p)),c=8e3,u=new Set([527,4987,115450,360823,88423,77130]),f=e=>`<${e.subType}>${e.name}</${e.subType}>`,m=e=>{const t=Math.trunc(e/1e3);return`${Math.floor(t/60)}:${(t%60).toString().padStart(2,"0")}`},y={};for(const o of reportGroup.fights){const n=o.eventsByCategoryAndDisposition("aurasGained","friendly");for(const r of n)if(65116===(null===(e=r.ability)||void 0===e?void 0:e.id)&&"applybuff"===r.type&&65116===r.ability.id&&"applybuff"===r.type){const e=null!==(i=null===(t=r.source)||void 0===t?void 0:t.name)&&void 0!==i?i:"Unknown",n=o.id;y[n]||(y[n]={}),y[n][e]||(y[n][e]=[]),y[n][e].push(r.timestamp)}}const h={};for(const e of reportGroup.fights){const t=e.eventsByCategoryAndDisposition("dispels","friendly");for(const i of t)if("dispel"===i.type&&i.stoppedAbility.id===p&&u.has(null!==(n=null===(o=null==i?void 0:i.ability)||void 0===o?void 0:o.id)&&void 0!==n?n:-1)){const t=f(i.source),o=e.id;h[o]||(h[o]={}),h[o][t]||(h[o][t]=[]),h[o][t].push(i.timestamp)}}const g={};for(const e of reportGroup.fights){const t=e.eventsByCategoryAndDisposition("deathsAndResurrects","friendly");for(const i of t)if(i.target&&"Player"===i.target.type){const t=f(i.target),o=e.id;if(g[o]||(g[o]={}),g[o][t]||(g[o][t]=[]),"resurrect"===i.type){const n=g[o][t].pop();g[o][t].push({start:null!==(r=null==n?void 0:n.start)&&void 0!==r?r:e.startTime,end:i.timestamp})}else g[o][t].push({start:i.timestamp,end:-1})}}const v=[];reportGroup.fights.forEach((e=>{const t=e.friendlyPlayerDeathEvents.filter((e=>{var t;return(null===(t=e.killingAbility)||void 0===t?void 0:t.id)===p}));t.forEach((t=>{if(!t.target)return;let i=!1;const o=s.has(t.target.name);o&&(i=((e,t,i)=>{var o;const n=null===(o=y[i])||void 0===o?void 0:o[e];return!n||0===n.length||n.sort(((e,t)=>t-e))[0]+12e4<t})(t.target.name,t.timestamp,e.id));const n=((e,t)=>Object.keys(h[t]||{}).filter((i=>h[t][i].every((t=>t+c+1e3<e||t>e))&&(g[t][i]||[]).every((t=>t.start+1>e||t.end<e&&t.end>0)))).map((i=>{const o=h[t][i].filter((t=>t+c<e)).sort(((e,t)=>t-e))[0];return`${i} (${((e-(o+c))/1e3).toFixed(2)}s)`})))(t.timestamp,e.id);if(0===n.length&&!i)return;const r=`${e.isKill?`<Kill>Kill ${l[e.id]}</Kill>`:`<Wipe>Wipe ${l[e.id]}</Wipe>`}`;v.push({name:f(t.target),fight:r,hadStoneForm:o?i?'<Kill><Icon type="check"></Kill>':'<Wipe><Icon type="close"></Wipe>':"",dispelsAvailable:n,timestamp:m(t.timestamp-e.startTime)})}))}));return{component:"Table",props:{columns:{title:{header:d?`<AbilityIcon id="${d.id}" icon="${d.icon}" type="${d.type}">${d.name}</AbilityIcon> Deaths`:"Aflame Deaths",columns:{name:{header:"Player"},fight:{header:"Fight"},timestamp:{header:"Timestamp",textAlign:"center"},hadStoneForm:{header:"Stoneform ready",textAlign:"center"},dispelsAvailable:{header:"Dispels ready (time available)"}}}},data:v}}},globalThis.getComponent={}.default})();
 /*Source Code LZString compressed, Base64 encoded 
N4KABBYEQKYB4EMC2AHANjAwge1dgdjPgC5QBc08y6WuKBRxYAxtgK5oAmY+2TARjDAAzdvk5QQAXyA=
*/